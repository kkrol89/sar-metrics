{
    "AWSCloudFormationVersion": "2010-09-09",
    "Description": "Scaling template",
    "Parameters": {
        "KeyName": {
            "Type": "String"
        },
        "AwsAccessKey": {
            "Type": "String"
        },
        "AwsSecretAccessKey": {
            "Type": "String"
        },
        "StackName": {
            "Type": "String"
        },
        "DBServerPassword": {
            "Type": "String"
        }
    },
    "Resources": {
        "WebServerConfig": {
	"Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "gcc": [],
                                "gcc-c++": [],
                                "ruby": [],
                                "ruby-devel": [],
                                "mysql-devel": [],
                                "rubygems": [],
                                "git": [],
                                "sysstat": [],
                                "python-pip": [],
                                "python-devel": [],
                                "libxml2-devel": [],
                                "libxslt-devel": []
                            }
                        },
                        "files": {
                            "/etc/ec2-credentials.rc": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export AWS_ACCESS_KEY_ID=", { "Ref": "AwsAccessKey" }, ";\n",
                                            "export AWS_SECRET_ACCESS_KEY=", { "Ref": "AwsSecretAccessKey" }, ";\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
			    "A-update-path-variable": {
			      "command": "echo 'export PATH=$PATH:/usr/local/bin' >> /etc/bashrc"
                            },
		            "A-install-bundler": {
                              "command":"gem install bundler --no-ri --no-rdoc"
	                    },
                            "B-clone-repo": {
                                "cwd": "~",
                                "command": "git clone https://github.com/kkrol89/news-feed.git"
                            },
                            "C-install-dependencies": {
                                "cwd": "~/news-feed",
                                "command": "bundle install --deployment &> bundle_command.log"
                            },
                            "D-setup-database": {
                                "cwd": "~/news-feed",
				"command": {
                                    "Fn::Join": [
                                        "\n",
                                        [
					    "cp config/database.yml.example config/database.yml",
					    {"Fn::Join": [ "", [
                                            	"sed -i '/password:/ s/$/ ", 
						{ "Ref": "DBServerPassword" },
					        "/' config/database.yml"
					    ]]},
					    {"Fn::Join": [ "", [
		                                "sed -i '/host:/ s/$/ ", 
						{ "Fn::GetAtt": [
				                   "DBServer",
				                   "PrivateIp"
		                    		]},
						"/' config/database.yml"
					    ]]}

                                        ]
                                    ]
                                }
                            },
			    "E-precompile-assets": {
                                "cwd": "~/news-feed",
				"command" : "RAILS_ENV=production bundle exec rake assets:precompile &> rake_command.log"
                            },
                            "F-start-server": {
                                "cwd": "~/news-feed",
                                "command": "script/rails server -d -e production &> rails_server.log"
                            },
                            "G-install-pbr": {
                                "cwd": "~",
                                "command": "git clone http://github.com/openstack-dev/pbr.git && cd pbr && python setup.py install"
                            },
                            "H-install-heat-cfnclient": {
                                "cwd": "~",
                                "command": "git clone http://github.com/openstack-dev/heat-cfnclient.git && cd heat-cfnclient && python setup.py install"
                            },
                            "I-configure-cloudwatch-host": {
                                "cwd": "~",
                                "command": "echo \"10.197.217.60   monitoring.us-east-1.amazonaws.com\" >> /etc/hosts"
                            },
                            "J-install-sar-metrics": {
                                "cwd": "~",
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "git clone https://github.com/kkrol89/sar-metrics.git && cd sar-metrics && ruby metrics-setup.rb scaling.template", 
					    { "Ref": "StackName" }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "SecurityGroups": [
                    {
                        "Ref": "DefaultSecurityGroup"
                    }
                ],
                "ImageId": "F18-x86_64",
                "InstanceType": "m1.small",
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -xe",
                                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1",
                                "# Flush iptables's default rules",
                                "/sbin/iptables -F",
                                "/sbin/iptables -X",
                                "# export proxies",
                                "echo 'export http_proxy=http://10.197.217.62:3128' >> /etc/bashrc",
                                "echo 'export https_proxy=http://10.197.217.62:3128' >> /etc/bashrc",
                                "echo 'export no_proxy=127.0.0.1,localhost' >> /etc/bashrc",
                                "echo proxy=http://10.197.217.62:3128/ >> /etc/yum.conf",
                                "source /root/.bashrc",
                                "echo \"127.0.0.1 $(cat /etc/hostname)\" >> /etc/hosts",
                                "# calling cfn-init",
                                "/opt/aws/bin/cfn-init"
                            ]
                        ]
                    }
                }
            }
        },
	"DBServer": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "mysql-server": [],
                                "git": []
                            }
                        },
                        "commands": {
                            "A-start-mysqld": {
                                "cwd": "~",
                                "command": "service mysqld start"
                            },
                            "B-configure-mysql": {
                               "cwd": "~",
                               "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "mysqladmin -u root password ", 
					    { "Ref": "DBServerPassword" }
                                        ]
                                    ]
                                }
                            },
			    "C-allow-remote-connections" : {
				"cwd" : "~",
				"command" : {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "mysql -uroot -p", 
					    { "Ref": "DBServerPassword" },
					    " -e \"GRANT ALL PRIVILEGES ON *.* TO root@'%' IDENTIFIED BY '",
					    { "Ref": "DBServerPassword" },
					    "' WITH GRANT OPTION;\""
                                        ]
                                    ]
                                } 
			    },
                            "D-clone-repo": {
                                "cwd": "~",
                                "command": "git clone https://github.com/kkrol89/news-feed.git"
                            },
                            "E-import-sql": {
                                "cwd": "~/news-feed",
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "mysql -uroot -p", 
					    { "Ref": "DBServerPassword" },
					    " < db/dump.sql"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "SecurityGroups": [
                    {
                        "Ref": "DefaultSecurityGroup"
                    }
                ],
                "ImageId": "F18-x86_64",
                "InstanceType": "m1.small",
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -xe",
                                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1",
                                "# Flush iptables's default rules",
                                "/sbin/iptables -F",
                                "/sbin/iptables -X",
                                "# export proxies",
                                "echo 'export http_proxy=http://10.197.217.62:3128' >> /etc/bashrc",
                                "echo 'export https_proxy=http://10.197.217.62:3128' >> /etc/bashrc",
                                "echo 'export no_proxy=127.0.0.1,localhost' >> /etc/bashrc",
                                "echo proxy=http://10.197.217.62:3128/ >> /etc/yum.conf",
                                "source /root/.bashrc",
                                "echo \"127.0.0.1 $(cat /etc/hostname)\" >> /etc/hosts",
                                "# calling cfn-init",
                                "/opt/aws/bin/cfn-init"
                            ]
                        ]
                    }
                }
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "LaunchConfigurationName": { "Ref" : "WebServerConfig" },
                "MinSize": "2",
                "MaxSize": "4",
		"LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
            }
        },
        "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WebServerGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WebServerGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "MEMAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if MEM > 70% for 1 minute",
                "MetricName": "MemoryUtilization",
                "Namespace": "system/linux",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "1",
                "Threshold": "70",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WebServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "MEMAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if MEM < 30% for 1 minute",
                "MetricName": "MemoryUtilization",
                "Namespace": "system/linux",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "1",
                "Threshold": "30",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WebServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 90% for 1 minute",
                "MetricName": "CPUUtilization",
                "Namespace": "system/linux",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "1",
                "Threshold": "90",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WebServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 10% for 1 minute",
                "MetricName": "CPUUtilization",
                "Namespace": "system/linux",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "1",
                "Threshold": "10",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WebServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "DefaultSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow ssh connection to host",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3000",
                        "ToPort": "3000",
                        "CidrIp": "0.0.0.0/0"
                    },
		    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": []
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "3000",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:3000/health_status.html",
                    "HealthyThreshold": "3",
                    "UnhealthyThreshold": "5",
                    "Interval": "30",
                    "Timeout": "5"
                }
            }
        }
    },
    "Outputs": {
        "URL": {
            "Description": "URL of the sample website",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        }
    }
}
